# -*- coding: utf-8 -*- """ Created on 12-6-2017 _04_LinearSupportVectorRegression    @author: Mahmoud M. Abderlrahman <arch.mahmoud.ouf111@gmail.com> under BSD simplified Licence [ANT] A machine learning plugin for Rhino\Grasshopper      Started by Mahmoud Abdelrahman [Mahmoud Ouf] under BSD License      Copyright (c) 2017, Mahmoud AbdelRahman <arch.mahmoud.ouf111@gmail.com>     All rights reserved.      Redistribution and use in source and binary forms, with or without     modification, are permitted provided that the following conditions are met:      * Redistributions of source code must retain the above copyright notice, this       list of conditions and the following disclaimer.      * Redistributions in binary form must reproduce the above copyright notice,       this list of conditions and the following disclaimer in the documentation       and/or other materials provided with the distribution.      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"     AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE     IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE     FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL     DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER     CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,     OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE     OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  varialbles :  ##workingDir## ##logFile## ##resFile## ##dataFile## ##targetFile## ##predictData## """ workingDir = "##workingDir##" logFile = "##logFile##" resFile = workingDir+"##resFile##"    isDump = True  log_file =open(logFile, 'w')   try:     from sklearn.svm import LinearSVR except Exception as e:     log_file.write(str(e) + "\n") try:     import pickle except Exception as e:     log_file.write(str(e) + "\n") try:     import xml.etree.cElementTree as ET except Exception as e:     log_file.write(str(e) + "\n")  if(isDump):     dataFile = open("##dataFile##", 'r')     X = pickle.loads(dataFile.read())     targetFile = open("##targetFile##", 'r')     y = pickle.loads(targetFile.read()) else:     dataFile = open("##dataFile##", 'r')     X = dataFile.read()     targetFile = open("##targetFile##", 'r')     y = targetFile.read()       model = LinearSVR() model.fit(X, y)  def writeXMLFile(data, workingDir):     '''     data is a dictionary consists of variables and their names.     workingDir : is the directory at which data should be written     '''     xmlFile = workingDir+"res.xml"     root = ET.Element("result")     Xmlpredict = ET.SubElement(root, "prediction").text = str(result)     for key, value in data.iteritems():            ET.SubElement(root, str(key)).text = str(value)     tree = ET.ElementTree(root)     tree.write(xmlFile)           #TODO: Assign all variables.  try:     model.C=##data0##     model.loss=##data1##     model.epsilon=##data2##     model.dual=##data3##     model.tol=##data4##     model.fit_intercept=##data5##     model.intercept_scaling=##data6##     model.verbose=##data7##     model.random_state=##data8##     model.max_iter=##data9##      except Exception as e:     log_file.write(str(e)+"\n")  try:     #TODO: get results .      result = model.predict(PredictData)     score = model.score(X,y)      coef= model.coef_ 	intercept = model.intercept_           #TODO: write results as dictionary of {"key1": value1, "key2": value2}          allData = {"prediction":result, "score":score,"coef":coef, "intercept":intercept}     writeXMLFile(allData, workingDir)  except Exception as e:     log_file.write("Error : There is a problem in predicting Data, Make sure you typed the data correctly\n")     log_file.write(str(e) + "\n") log_file.write(error)  log_file.close()