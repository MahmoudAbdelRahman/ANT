# -*- coding: utf-8 -*-
"""
Created on Tue Apr 04 05:14:23 2017
Logistic Regression 
 
@author: Mahmoud M. Abderlrahman <arch.mahmoud.ouf111@gmail.com>
under BSD simplified Licence
[ANT] A machine learning plugin for Rhino\Grasshopper 
    Started by Mahmoud Abdelrahman [Mahmoud Ouf] under BSD License

    Copyright (c) 2017, Mahmoud AbdelRahman <arch.mahmoud.ouf111@gmail.com>
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

varialbles : 
##workingDir##
##logFile##
##resFile##
##dataFile##
##targetFile##
##predictData##
"""
workingDir = "##workingDir##"
logFile = "##logFile##"
resFile = workingDir+"##resFile##"


xmlFile = workingDir+"res.xml"
isDump = True

log_file =open(logFile, 'w') 

try:
    from sklearn.linear_model import SGDRegressor
    import pickle
    import xml.etree.cElementTree as ET
except Exception as e:
    log_file.write(str(e) + "\n")

if(isDump):
    dataFile = open("##dataFile##", 'r')
    X = pickle.loads(dataFile.read())
    targetFile = open("##targetFile##", 'r')
    y = pickle.loads(targetFile.read())
else:
    dataFile = open("##dataFile##", 'r')
    X = dataFile.read()
    targetFile = open("##targetFile##", 'r')
    y = targetFile.read()
    

model = SGDRegressor()
model.fit(X, y)

#TODO: Assign all variables. 
try:
    model.loss = ##data0##
    model.penalty = ##data1##
    model.alpha = ##data2##
    model.l1_ratio= ##data3##
    model.fit_intercept= ##data4##
    model.n_iter= ##data5##
    model.shuffle= ##data6##
    model.random_state= ##data7##
    model.verbose= ##data8##
    model.epsilon= ##data9##
    model.n_jobs= ##data10##
    model.learning_rate= ##data11##
    model.eta0= ##data12##
    model.power_t= ##data13##
    model.class_weight= ##data14##
    model.warm_start= ##data15##
    model.average= ##data16##
except Exception as e:
    log_file.write(str(e)+"\n")
    
try:
    #TODO: get results . 
    result = model.predict(PredictData)
    score = model.score(X, y)

    coeff = model.coef_
    intercept = model.intercept_

    #TODO: write results into an Xml file
    root = ET.Element("result")
    
    Xmlpredict = ET.SubElement(root, "prediction").text = str(result)
    Xmlscore = ET.SubElement(root, "score").text = str(score)
    Xmlcoeff = ET.SubElement(root, "coeff").text = str(coeff)
    Xmlintercept = ET.SubElement(root, "intercept").text = str(intercept)

    tree = ET.ElementTree(root)
    tree.write(xmlFile)
	
except Exception as e:
    log_file.write("Error : There is a problem in predicting Data, Make sure you typed the data correctly\n")
    log_file.write(str(e) + "\n")
log_file.write(error)

log_file.close()